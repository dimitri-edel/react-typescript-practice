[
    {
        "scope": "main",
        "id": "main_title",
        "text": "Useful TypeScript Features",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "main_title",
        "text": "Nützliche TypeScript-Merkmale",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "main_description",
        "text": "This page contains examples of useful TypeScript features that enhance development in React applications.",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "main_description",
        "text": "Diese Seite enthält Beispiele für nützliche TypeScript-Merkmale, die die Entwicklung in React-Anwendungen verbessern.",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "typesafety_title",
        "text": "Type Safety",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "typesafety_title",
        "text": "Typensicherheit",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "typesafety_description",
        "text": "TypeScript provides static type checking, which helps catch errors at compile time rather than runtime. This leads to more robust and maintainable code.",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "typesafety_description",
        "text": "TypeScript bietet statische Typprüfung, die hilft, Fehler zur Kompilierzeit anstatt zur Laufzeit zu erkennen. Dies führt zu robusterem und wartbarerem Code.",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "typesafety_source_code",
        "text": "// Example of type safety in TypeScript\ninterface User {\n  id: number;\n  name: string;\n}\n\nconst getUser = (id: number): User => {\n  return { id, name: 'John Doe' };\n};\n\nconst user = getUser(1);\nconsole.log(user.name); // John Doe\n",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "typesafety_source_code",
        "text": "// Beispiel für Typensicherheit in TypeScript\ninterface User {\n  id: number;\n  name: string;\n}\n\nconst getUser = (id: number): User => {\n  return { id, name: 'John Doe' };\n};\n\nconst user = getUser(1);\nconsole.log(user.name); // John Doe\n",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "typesafety_description",
        "text": "TypeScript provides static type checking, which helps catch errors at compile time rather than runtime. This leads to more robust and maintainable code.",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "typesafety_description",
        "text": "TypeScript bietet statische Typprüfung, die hilft, Fehler zur Kompilierzeit anstatt zur Laufzeit zu erkennen. Dies führt zu robusterem und wartbarerem Code.",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "interfaces_title",
        "text": "Interfaces and Types",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "interfaces_title",
        "text": "Schnittstellen und Typen",
        "locale": "de"
    },
    {
        "scope": "main",
        "id": "interfaces_description",
        "text": "TypeScript allows you to define custom types and interfaces, making it easier to work with complex data structures and ensuring type safety across your application.",
        "locale": "en"
    },
    {
        "scope": "main",
        "id": "interfaces_description",
        "text": "TypeScript ermöglicht es Ihnen, benutzerdefinierte Typen und Schnittstellen zu definieren, was die Arbeit mit komplexen Datenstrukturen erleichtert und die Typensicherheit in Ihrer Anwendung gewährleistet.",
        "locale": "de"
    }
]